import{C as D,g as S,co as L,e as k,cp as b,b7 as A,B as o,cq as P,u as C,cr as N,bd as _,cs as O,ct as F,cu as R,cv as B,cm as H,cw as K,cx as z,i as G,a as U,cy as W,cz as $,cA as V,cB as M,cd as g,bi as x,aw as J,ax as q,cC as Y}from"./index-0T11UOAg.js";import{i as E}from"./url-a45219bd.browser.esm-Fcerb4CE.js";async function y(i){const e=await b(i);return Object.keys(e).map(t=>{let s=e[t];return(typeof s!="string"||!s.startsWith("0x"))&&(s=G(s)),[t,s]}).reduce((t,s)=>{let[a,n]=s;return{...t,[a]:n}},{})}async function Z(i,e,t){const s=await b(i),a={sender:s.sender,nonce:s.nonce,initCodeHash:g(s.initCode),callDataHash:g(s.callData),callGasLimit:s.callGasLimit,verificationGasLimit:s.verificationGasLimit,preVerificationGas:s.preVerificationGas,maxFeePerGas:s.maxFeePerGas,maxPriorityFeePerGas:s.maxPriorityFeePerGas,paymasterAndDataHash:g(s.paymasterAndData)},n={components:[{type:"address",name:"sender"},{type:"uint256",name:"nonce"},{type:"bytes32",name:"initCodeHash"},{type:"bytes32",name:"callDataHash"},{type:"uint256",name:"callGasLimit"},{type:"uint256",name:"verificationGasLimit"},{type:"uint256",name:"preVerificationGas"},{type:"uint256",name:"maxFeePerGas"},{type:"uint256",name:"maxPriorityFeePerGas"},{type:"bytes32",name:"paymasterAndDataHash"}],name:"hashedUserOp",type:"tuple"},r=x.encode([n],[{...a}]),l=g(r),d=x.encode(["bytes32","address","uint256"],[l,e,t]);return g(d)}const Q=()=>{const i=BigInt(Math.floor(Math.random()*4294967296)),e=BigInt(Math.floor(Math.random()*4294967296)),t=BigInt(Math.floor(Math.random()*4294967296)),s=BigInt(Math.floor(Math.random()*4294967296)),a=BigInt(Math.floor(Math.random()*4294967296)),n=BigInt(Math.floor(Math.random()*4294967296));return i<<BigInt(160)|e<<BigInt(128)|t<<BigInt(96)|s<<BigInt(64)|a<<BigInt(32)|n},I=()=>{let i=Q().toString(16);return i.length%2!==0&&(i="0"+i),i="0x"+i,o.from(Y([i,"0x0000000000000000"]))};class X{}var T={name:"@thirdweb-dev/wallets",version:"2.4.4",main:"dist/thirdweb-dev-wallets.cjs.js",module:"dist/thirdweb-dev-wallets.esm.js",browser:{"./dist/thirdweb-dev-wallets.esm.js":"./dist/thirdweb-dev-wallets.browser.esm.js"},exports:{".":{module:{browser:"./dist/thirdweb-dev-wallets.browser.esm.js",default:"./dist/thirdweb-dev-wallets.esm.js"},default:"./dist/thirdweb-dev-wallets.cjs.js"},"./evm":{module:{browser:"./evm/dist/thirdweb-dev-wallets-evm.browser.esm.js",default:"./evm/dist/thirdweb-dev-wallets-evm.esm.js"},default:"./evm/dist/thirdweb-dev-wallets-evm.cjs.js"},"./evm/wallets/okx":{module:{browser:"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.browser.esm.js",default:"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.esm.js"},default:"./evm/wallets/okx/dist/thirdweb-dev-wallets-evm-wallets-okx.cjs.js"},"./evm/wallets/base":{module:{browser:"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.browser.esm.js",default:"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.esm.js"},default:"./evm/wallets/base/dist/thirdweb-dev-wallets-evm-wallets-base.cjs.js"},"./evm/wallets/safe":{module:{browser:"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.browser.esm.js",default:"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.esm.js"},default:"./evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.cjs.js"},"./evm/wallets/async":{module:{browser:"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.browser.esm.js",default:"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.esm.js"},default:"./evm/wallets/async/dist/thirdweb-dev-wallets-evm-wallets-async.cjs.js"},"./evm/wallets/frame":{module:{browser:"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.browser.esm.js",default:"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.esm.js"},default:"./evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.cjs.js"},"./evm/wallets/magic":{module:{browser:"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.browser.esm.js",default:"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.esm.js"},default:"./evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.cjs.js"},"./evm/wallets/rabby":{module:{browser:"./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.browser.esm.js",default:"./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.esm.js"},default:"./evm/wallets/rabby/dist/thirdweb-dev-wallets-evm-wallets-rabby.cjs.js"},"./evm/wallets/trust":{module:{browser:"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.browser.esm.js",default:"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.esm.js"},default:"./evm/wallets/trust/dist/thirdweb-dev-wallets-evm-wallets-trust.cjs.js"},"./evm/wallets/xdefi":{module:{browser:"./evm/wallets/xdefi/dist/thirdweb-dev-wallets-evm-wallets-xdefi.browser.esm.js",default:"./evm/wallets/xdefi/dist/thirdweb-dev-wallets-evm-wallets-xdefi.esm.js"},default:"./evm/wallets/xdefi/dist/thirdweb-dev-wallets-evm-wallets-xdefi.cjs.js"},"./evm/wallets/blocto":{module:{browser:"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.browser.esm.js",default:"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.esm.js"},default:"./evm/wallets/blocto/dist/thirdweb-dev-wallets-evm-wallets-blocto.cjs.js"},"./evm/wallets/coin98":{module:{browser:"./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.browser.esm.js",default:"./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.esm.js"},default:"./evm/wallets/coin98/dist/thirdweb-dev-wallets-evm-wallets-coin98.cjs.js"},"./evm/wallets/engine":{module:{browser:"./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.browser.esm.js",default:"./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.esm.js"},default:"./evm/wallets/engine/dist/thirdweb-dev-wallets-evm-wallets-engine.cjs.js"},"./evm/wallets/ethers":{module:{browser:"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.browser.esm.js",default:"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.esm.js"},default:"./evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.cjs.js"},"./evm/wallets/onekey":{module:{browser:"./evm/wallets/onekey/dist/thirdweb-dev-wallets-evm-wallets-onekey.browser.esm.js",default:"./evm/wallets/onekey/dist/thirdweb-dev-wallets-evm-wallets-onekey.esm.js"},default:"./evm/wallets/onekey/dist/thirdweb-dev-wallets-evm-wallets-onekey.cjs.js"},"./evm/wallets/signer":{module:{browser:"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.browser.esm.js",default:"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.esm.js"},default:"./evm/wallets/signer/dist/thirdweb-dev-wallets-evm-wallets-signer.cjs.js"},"./evm/wallets/zerion":{module:{browser:"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.browser.esm.js",default:"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.esm.js"},default:"./evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.cjs.js"},"./evm/wallets/aws-kms":{module:{browser:"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.browser.esm.js",default:"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.esm.js"},default:"./evm/wallets/aws-kms/dist/thirdweb-dev-wallets-evm-wallets-aws-kms.cjs.js"},"./evm/wallets/gcp-kms":{module:{browser:"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.browser.esm.js",default:"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.esm.js"},default:"./evm/wallets/gcp-kms/dist/thirdweb-dev-wallets-evm-wallets-gcp-kms.cjs.js"},"./evm/wallets/phantom":{module:{browser:"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.browser.esm.js",default:"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.esm.js"},default:"./evm/wallets/phantom/dist/thirdweb-dev-wallets-evm-wallets-phantom.cjs.js"},"./evm/wallets/abstract":{module:{browser:"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js",default:"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.esm.js"},default:"./evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.cjs.js"},"./evm/wallets/injected":{module:{browser:"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.browser.esm.js",default:"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.esm.js"},default:"./evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.cjs.js"},"./evm/wallets/metamask":{module:{browser:"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.browser.esm.js",default:"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.esm.js"},default:"./evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.cjs.js"},"./evm/wallets/core-wallet":{module:{browser:"./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.browser.esm.js",default:"./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.esm.js"},default:"./evm/wallets/core-wallet/dist/thirdweb-dev-wallets-evm-wallets-core-wallet.cjs.js"},"./evm/wallets/private-key":{module:{browser:"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.browser.esm.js",default:"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.esm.js"},default:"./evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.cjs.js"},"./evm/connectors/okx":{module:{browser:"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.browser.esm.js",default:"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.esm.js"},default:"./evm/connectors/okx/dist/thirdweb-dev-wallets-evm-connectors-okx.cjs.js"},"./evm/wallets/local-wallet":{module:{browser:"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.browser.esm.js",default:"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.esm.js"},default:"./evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.cjs.js"},"./evm/wallets/paper-wallet":{module:{browser:"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.browser.esm.js",default:"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.esm.js"},default:"./evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.cjs.js"},"./evm/wallets/smart-wallet":{module:{browser:"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.browser.esm.js",default:"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.esm.js"},default:"./evm/wallets/smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-smart-wallet.cjs.js"},"./evm/connectors/safe":{module:{browser:"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.browser.esm.js",default:"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.esm.js"},default:"./evm/connectors/safe/dist/thirdweb-dev-wallets-evm-connectors-safe.cjs.js"},"./evm/connectors/frame":{module:{browser:"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.browser.esm.js",default:"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.esm.js"},default:"./evm/connectors/frame/dist/thirdweb-dev-wallets-evm-connectors-frame.cjs.js"},"./evm/connectors/magic":{module:{browser:"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.browser.esm.js",default:"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.esm.js"},default:"./evm/connectors/magic/dist/thirdweb-dev-wallets-evm-connectors-magic.cjs.js"},"./evm/connectors/paper":{module:{browser:"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.browser.esm.js",default:"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.esm.js"},default:"./evm/connectors/paper/dist/thirdweb-dev-wallets-evm-connectors-paper.cjs.js"},"./evm/connectors/rabby":{module:{browser:"./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.browser.esm.js",default:"./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.esm.js"},default:"./evm/connectors/rabby/dist/thirdweb-dev-wallets-evm-connectors-rabby.cjs.js"},"./evm/connectors/trust":{module:{browser:"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.browser.esm.js",default:"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.esm.js"},default:"./evm/connectors/trust/dist/thirdweb-dev-wallets-evm-connectors-trust.cjs.js"},"./evm/connectors/xdefi":{module:{browser:"./evm/connectors/xdefi/dist/thirdweb-dev-wallets-evm-connectors-xdefi.browser.esm.js",default:"./evm/connectors/xdefi/dist/thirdweb-dev-wallets-evm-connectors-xdefi.esm.js"},default:"./evm/connectors/xdefi/dist/thirdweb-dev-wallets-evm-connectors-xdefi.cjs.js"},"./evm/wallets/rainbow-wallet":{module:{browser:"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.browser.esm.js",default:"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.esm.js"},default:"./evm/wallets/rainbow-wallet/dist/thirdweb-dev-wallets-evm-wallets-rainbow-wallet.cjs.js"},"./evm/wallets/wallet-connect":{module:{browser:"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.browser.esm.js",default:"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.esm.js"},default:"./evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.cjs.js"},"./evm/connectors/blocto":{module:{browser:"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.browser.esm.js",default:"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.esm.js"},default:"./evm/connectors/blocto/dist/thirdweb-dev-wallets-evm-connectors-blocto.cjs.js"},"./evm/connectors/coin98":{module:{browser:"./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.browser.esm.js",default:"./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.esm.js"},default:"./evm/connectors/coin98/dist/thirdweb-dev-wallets-evm-connectors-coin98.cjs.js"},"./evm/connectors/onekey":{module:{browser:"./evm/connectors/onekey/dist/thirdweb-dev-wallets-evm-connectors-onekey.browser.esm.js",default:"./evm/connectors/onekey/dist/thirdweb-dev-wallets-evm-connectors-onekey.esm.js"},default:"./evm/connectors/onekey/dist/thirdweb-dev-wallets-evm-connectors-onekey.cjs.js"},"./evm/connectors/signer":{module:{browser:"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.browser.esm.js",default:"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.esm.js"},default:"./evm/connectors/signer/dist/thirdweb-dev-wallets-evm-connectors-signer.cjs.js"},"./evm/connectors/zerion":{module:{browser:"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.browser.esm.js",default:"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.esm.js"},default:"./evm/connectors/zerion/dist/thirdweb-dev-wallets-evm-connectors-zerion.cjs.js"},"./evm/wallets/coinbase-wallet":{module:{browser:"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.browser.esm.js",default:"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.esm.js"},default:"./evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.cjs.js"},"./evm/wallets/embedded-wallet":{module:{browser:"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.browser.esm.js",default:"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.esm.js"},default:"./evm/wallets/embedded-wallet/dist/thirdweb-dev-wallets-evm-wallets-embedded-wallet.cjs.js"},"./evm/connectors/phantom":{module:{browser:"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.browser.esm.js",default:"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.esm.js"},default:"./evm/connectors/phantom/dist/thirdweb-dev-wallets-evm-connectors-phantom.cjs.js"},"./evm/connectors/rainbow":{module:{browser:"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.browser.esm.js",default:"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.esm.js"},default:"./evm/connectors/rainbow/dist/thirdweb-dev-wallets-evm-connectors-rainbow.cjs.js"},"./evm/connectors/injected":{module:{browser:"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.browser.esm.js",default:"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.esm.js"},default:"./evm/connectors/injected/dist/thirdweb-dev-wallets-evm-connectors-injected.cjs.js"},"./evm/connectors/metamask":{module:{browser:"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.browser.esm.js",default:"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.esm.js"},default:"./evm/connectors/metamask/dist/thirdweb-dev-wallets-evm-connectors-metamask.cjs.js"},"./evm/wallets/local-wallet-node":{module:{browser:"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.browser.esm.js",default:"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.esm.js"},default:"./evm/wallets/local-wallet-node/dist/thirdweb-dev-wallets-evm-wallets-local-wallet-node.cjs.js"},"./evm/wallets/wallet-connect-v1":{module:{browser:"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.browser.esm.js",default:"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.esm.js"},default:"./evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.cjs.js"},"./evm/wallets/crypto-defi-wallet":{module:{browser:"./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.browser.esm.js",default:"./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.esm.js"},default:"./evm/wallets/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-wallets-crypto-defi-wallet.cjs.js"},"./evm/wallets/aws-secrets-manager":{module:{browser:"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.browser.esm.js",default:"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.esm.js"},default:"./evm/wallets/aws-secrets-manager/dist/thirdweb-dev-wallets-evm-wallets-aws-secrets-manager.cjs.js"},"./evm/connectors/core-wallet":{module:{browser:"./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.browser.esm.js",default:"./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.esm.js"},default:"./evm/connectors/core-wallet/dist/thirdweb-dev-wallets-evm-connectors-core-wallet.cjs.js"},"./evm/connectors/local-wallet":{module:{browser:"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.browser.esm.js",default:"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.esm.js"},default:"./evm/connectors/local-wallet/dist/thirdweb-dev-wallets-evm-connectors-local-wallet.cjs.js"},"./evm/connectors/smart-wallet":{module:{browser:"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js",default:"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.esm.js"},default:"./evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.cjs.js"},"./evm/connectors/wallet-connect":{module:{browser:"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.browser.esm.js",default:"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.esm.js"},default:"./evm/connectors/wallet-connect/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect.cjs.js"},"./evm/connectors/coinbase-wallet":{module:{browser:"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.browser.esm.js",default:"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.esm.js"},default:"./evm/connectors/coinbase-wallet/dist/thirdweb-dev-wallets-evm-connectors-coinbase-wallet.cjs.js"},"./evm/connectors/embedded-wallet":{module:{browser:"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.browser.esm.js",default:"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.esm.js"},default:"./evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.cjs.js"},"./evm/wallets/token-bound-smart-wallet":{module:{browser:"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.browser.esm.js",default:"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.esm.js"},default:"./evm/wallets/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-wallets-token-bound-smart-wallet.cjs.js"},"./evm/connectors/wallet-connect-v1":{module:{browser:"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.browser.esm.js",default:"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.esm.js"},default:"./evm/connectors/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-connectors-wallet-connect-v1.cjs.js"},"./evm/connectors/crypto-defi-wallet":{module:{browser:"./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.browser.esm.js",default:"./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.esm.js"},default:"./evm/connectors/crypto-defi-wallet/dist/thirdweb-dev-wallets-evm-connectors-crypto-defi-wallet.cjs.js"},"./evm/connectors/token-bound-smart-wallet":{module:{browser:"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.browser.esm.js",default:"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.esm.js"},default:"./evm/connectors/token-bound-smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-token-bound-smart-wallet.cjs.js"},"./evm/connectors/embedded-wallet/implementations":{module:{browser:"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.browser.esm.js",default:"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.esm.js"},default:"./evm/connectors/embedded-wallet/implementations/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet-implementations.cjs.js"},"./package.json":"./package.json"},types:"dist/thirdweb-dev-wallets.cjs.d.ts",repository:"https://github.com/thirdweb-dev/js/tree/main/packages/wallets",license:"Apache-2.0",bugs:{url:"https://github.com/thirdweb-dev/js/issues"},author:"thirdweb eng <eng@thirdweb.com>",files:["dist/","evm/"],preconstruct:{entrypoints:["index.ts","evm/index.ts","evm/connectors/*/index.ts","evm/connectors/embedded-wallet/implementations/index.ts","evm/wallets/**"],exports:{envConditions:["browser"]}},sideEffects:!1,dependencies:{"@account-abstraction/contracts":"^0.5.0","@blocto/sdk":"^0.5.4","@coinbase/wallet-sdk":"^3.7.1","@google-cloud/kms":"3.0.1","@magic-ext/connect":"^6.7.2","@magic-ext/oauth":"^7.6.2","@magic-sdk/provider":"^13.6.2","@metamask/eth-sig-util":"^4.0.0","@paperxyz/embedded-wallet-service-sdk":"^1.2.5","@paperxyz/sdk-common-utilities":"^0.1.0","@safe-global/protocol-kit":"1.3.0","@safe-global/safe-ethers-adapters":"0.1.0-alpha.17","@thirdweb-dev/chains":"workspace:*","@thirdweb-dev/contracts-js":"workspace:*","@thirdweb-dev/crypto":"workspace:*","@thirdweb-dev/sdk":"workspace:*","@walletconnect/core":"^2.9.1","@walletconnect/ethereum-provider":"^2.9.1","@walletconnect/jsonrpc-utils":"^1.0.8","@walletconnect/modal":"^2.6.1","@walletconnect/types":"^2.9.1","@walletconnect/utils":"^2.10.2","@walletconnect/web3wallet":"^1.8.7","asn1.js":"5.4.1","bn.js":"5.2.0",buffer:"^6.0.3","eth-provider":"^0.13.6","ethereumjs-util":"^7.1.3",eventemitter3:"^5.0.1","key-encoder":"2.0.3","magic-sdk":"^13.6.2","web3-core":"1.5.2"},peerDependencies:{"@aws-sdk/client-secrets-manager":"^3.256.0","@noble/ed25519":"^1.7.1",bs58:"^5.0.0",ethers:"^5.7.2","ethers-aws-kms-signer":"^1.3.2",tweetnacl:"^1.0.3"},peerDependenciesMeta:{tweetnacl:{optional:!0},"@aws-sdk/client-secrets-manager":{optional:!0},"ethers-aws-kms-signer":{optional:!0},"@noble/ed25519":{optional:!0},bs58:{optional:!0},ethers:{optional:!0}},devDependencies:{"@aws-sdk/client-secrets-manager":"^3.378.0","@babel/plugin-transform-class-properties":"^7.23.3","@babel/plugin-transform-flow-strip-types":"^7.23.3","@babel/plugin-transform-private-methods":"^7.23.3","@microsoft/api-extractor":"^7.36.3","@noble/ed25519":"^1.7.1","@nomiclabs/hardhat-ethers":"^2.2.3","@preconstruct/cli":"2.7.0","@thirdweb-dev/tsconfig":"workspace:*","@types/bn.js":"^5.1.1","@types/jest":"^29.5.3",abitype:"^0.2.5","babel-plugin-transform-inline-environment-variables":"^0.4.4",bs58:"^5.0.0","cross-env":"^7.0.3","eslint-config-thirdweb":"workspace:*","eslint-plugin-better-tree-shaking":"0.0.4","eslint-plugin-tsdoc":"^0.2.16","ethereum-provider":"^0.7.7",ethers:"^5.7.2","ethers-aws-kms-signer":"^1.3.2",hardhat:"^2.17.0",jest:"^29.6.2","ts-jest":"^29.1.1",tweetnacl:"^1.0.3","typedoc-gen":"workspace:*",typescript:"^5.3.3"},scripts:{format:"prettier --write 'src/**/*'",lint:"eslint src/ && bunx publint --strict --level warning",fix:"eslint src/ --fix",clean:"rm -rf dist/",build:"tsc && cross-env THIRDWEB_EWS_SDK_VERSION=$npm_package_version preconstruct build","preconstruct:fix":"preconstruct fix",push:"yalc push",typedoc:"node scripts/typedoc.mjs",test:"jest"},engines:{node:">=18"},jest:{testTimeout:3e4}};class ee{constructor(e,t,s,a,n){this.bundlerUrl=e,this.entryPointAddress=t,this.chainId=s;const r={};if(E(this.bundlerUrl)){const l=typeof globalThis<"u"&&"APP_BUNDLE_ID"in globalThis?globalThis.APP_BUNDLE_ID:void 0;n?r["x-secret-key"]=n:a&&(r["x-client-id"]=a,l&&(r["x-bundle-id"]=l)),typeof globalThis<"u"&&"TW_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_AUTH_TOKEN=="string"&&(r.authorization=`Bearer ${globalThis.TW_AUTH_TOKEN}`),typeof globalThis<"u"&&"TW_CLI_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_CLI_AUTH_TOKEN=="string"&&(r.authorization=`Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`,r["x-authorize-wallet"]="true"),r["x-sdk-version"]=T.version,r["x-sdk-name"]=T.name,r["x-sdk-platform"]=l?"react-native":window.bridge!==void 0?"webGL":"browser"}this.userOpJsonRpcProvider=new K({url:this.bundlerUrl,headers:r},{name:"Connected bundler network",chainId:s}),this.initializing=this.validateChainId()}async validateChainId(){const e=await this.userOpJsonRpcProvider.send("eth_chainId",[]),t=parseInt(e);if(t!==this.chainId)throw new Error(`bundler ${this.bundlerUrl} is on chainId ${t}, but provider is on chainId ${this.chainId}`)}async sendUserOpToBundler(e){await this.initializing;const t=await y(e),s=[t,this.entryPointAddress];return await this.printUserOperation("eth_sendUserOperation",s),await this.userOpJsonRpcProvider.send("eth_sendUserOperation",[t,this.entryPointAddress])}async estimateUserOpGas(e){await this.initializing;const t=await y(e),s=[t,this.entryPointAddress];return await this.printUserOperation("eth_estimateUserOperationGas",s),await this.userOpJsonRpcProvider.send("eth_estimateUserOperationGas",[t,this.entryPointAddress])}async printUserOperation(e,t){}}class te extends X{constructor(e,t,s,a){super(),this.paymasterUrl=e,this.entryPoint=t,this.clientId=s,this.secretKey=a}async getPaymasterAndData(e){var n;const t={"Content-Type":"application/json"};if(E(this.paymasterUrl)){if(this.secretKey&&this.clientId)throw new Error("Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.");this.secretKey?t["x-secret-key"]=this.secretKey:this.clientId&&(t["x-client-id"]=this.clientId,typeof globalThis<"u"&&"APP_BUNDLE_ID"in globalThis&&(t["x-bundle-id"]=globalThis.APP_BUNDLE_ID)),typeof globalThis<"u"&&"TW_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_AUTH_TOKEN=="string"&&(t.authorization=`Bearer ${globalThis.TW_AUTH_TOKEN}`),typeof globalThis<"u"&&"TW_CLI_AUTH_TOKEN"in globalThis&&typeof globalThis.TW_CLI_AUTH_TOKEN=="string"&&(t.authorization=`Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`,t["x-authorize-wallet"]="true")}const s=await fetch(this.paymasterUrl,{method:"POST",headers:t,body:JSON.stringify({jsonrpc:"2.0",id:1,method:"pm_sponsorUserOperation",params:[await y(e),this.entryPoint]})}),a=await s.json();if(!s.ok){const r=a.error||s.statusText,l=a.code||"UNKNOWN";throw new Error(`Paymaster error: ${r}
Status: ${s.status}
Code: ${l}`)}if(a.result)return typeof a.result=="string"?{paymasterAndData:a.result}:a.result;{const r=((n=a.error)==null?void 0:n.message)||a.error||s.statusText||"unknown error";throw new Error(`Paymaster error from ${this.paymasterUrl}: ${r}`)}}}const se=(i,e,t,s)=>new te(i,e,t,s);class j{constructor(e,t,s,a,n,r,l){this.resolve=e,this.reject=t,this.entryPoint=s,this.sender=a,this.userOpHash=n,this.nonce=r,this.timeout=l,U(this,"resolved",!1),this.boundLisener=this.listenerCallback.bind(this)}start(){const e=this.entryPoint.filters.UserOperationEvent(this.userOpHash);setTimeout(async()=>{const t=await this.entryPoint.queryFilter(e,-10);t.length>0?this.listenerCallback(t[0]):this.entryPoint.once(e,this.boundLisener)},100)}stop(){this.entryPoint.off("UserOperationEvent",this.boundLisener)}async listenerCallback(){var r;for(var e=arguments.length,t=new Array(e),s=0;s<e;s++)t[s]=arguments[s];const a=arguments[arguments.length-1];if(!a.args){console.error("got event without args",a);return}if(a.args.userOpHash!==this.userOpHash){console.log(`== event with wrong userOpHash: sender/nonce: event.${a.args.sender}@${a.args.nonce.toString()}!= userOp.${this.sender}@${parseInt((r=this.nonce)==null?void 0:r.toString())}`);return}const n=await a.getTransactionReceipt();a.args.success||await this.extractFailureReason(n),this.stop(),this.resolve(n),this.resolved=!0}async extractFailureReason(e){e.status=0;const t=await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash,this.sender),e.blockHash);if(t[0]){let s=t[0].args.revertReason;s.startsWith("0x08c379a0")&&(s=x.decode(["string"],"0x"+s.substring(10)).toString()),this.reject(new Error(`UserOp failed with reason: ${s}`))}}}class ae extends J{constructor(e,t,s,a,n){super(),q(this,"provider",s),this.config=e,this.originalSigner=t,this.erc4337provider=s,this.httpRpcClient=a,this.smartAccountAPI=n}async sendTransaction(e,t){var d;const s=await b(e);await this.verifyAllNecessaryFields(s);const a=I(),n=await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient,{target:s.to||"",data:((d=s.data)==null?void 0:d.toString())||"0x",value:s.value,gasLimit:s.gasLimit,nonce:a,maxFeePerGas:s.maxFeePerGas,maxPriorityFeePerGas:s.maxPriorityFeePerGas},t),r=await this.smartAccountAPI.signUserOp(n),l=await this.erc4337provider.constructUserOpTransactionResponse(r);try{await this.httpRpcClient.sendUserOpToBundler(r)}catch(w){throw this.unwrapError(w)}return l}unwrapError(e){var t,s;try{let a="Unknown Error";if(e.error)a=`The bundler has failed to include UserOperation in a batch: ${e.error}`;else if(e.body&&typeof e.body=="string"){const r=JSON.parse(e.body),l=e.status||"UNKNOWN",d=(r==null?void 0:r.code)||"UNKNOWN";let w=((t=r==null?void 0:r.error)==null?void 0:t.message)||((s=r==null?void 0:r.error)==null?void 0:s.data)||(r==null?void 0:r.error)||e.reason;if(w!=null&&w.includes("FailedOp")){let v="";const c=w.match(/FailedOp\((.*)\)/);if(c){const f=c[1].split(",");v=`(paymaster address: ${f[1]})`,w=f[2]}a=`The bundler has failed to include UserOperation in a batch: ${w} ${v}`}else a=`RPC error: ${w}
Status: ${l}
Code: ${d}`}const n=new Error(a);return n.stack=e.stack,n}catch{}return e}async verifyAllNecessaryFields(e){if(!e.to)throw new Error("Missing call target");if(!e.data&&!e.value)throw new Error("Missing call data or value")}connect(e){throw new Error("changing providers is not supported")}async getAddress(){return this.address||(this.address=await this.erc4337provider.getSenderAccountAddress()),this.address}async signMessage(e){return await this.smartAccountAPI.checkAccountPhantom()&&this.config.deployOnSign&&(console.log("Account contract not deployed yet. Deploying account before signing message"),await(await this.sendTransaction({to:await this.getAddress(),data:"0x"})).wait()),await this.originalSigner.signMessage(e)}async signTransaction(e,t){var d;const s=await b(e);await this.verifyAllNecessaryFields(s);const a=I(),n=await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient,{target:s.to||"",data:((d=s.data)==null?void 0:d.toString())||"0x",value:s.value,gasLimit:s.gasLimit,nonce:a},t),r=await this.smartAccountAPI.signUserOp(n);return JSON.stringify(await y(r))}}class re extends z{constructor(e,t,s,a,n,r,l){super({name:"ERC-4337 Custom Network",chainId:e}),this.chainId=e,this.config=t,this.originalSigner=s,this.originalProvider=a,this.httpRpcClient=n,this.entryPoint=r,this.smartAccountAPI=l,this.signer=new ae(t,s,this,n,l)}getSigner(){return this.signer}async perform(e,t){if(e==="sendTransaction"||e==="getTransactionReceipt")throw new Error("Should not get here. Investigate.");return e==="estimateGas"?o.from(5e5):await this.originalProvider.perform(e,t)}async getTransaction(e){return await super.getTransaction(e)}async getTransactionReceipt(e){const t=await e,s=await this.getSenderAccountAddress();return await new Promise((a,n)=>{new j(a,n,this.entryPoint,s,t).start()})}async getSenderAccountAddress(){return await this.smartAccountAPI.getAccountAddress()}async waitForTransaction(e,t,s){const a=await this.getSenderAccountAddress();return await new Promise((n,r)=>{new j(n,r,this.entryPoint,a,e,void 0,s).start()})}async constructUserOpTransactionResponse(e){const t=await b(e),s=await this.smartAccountAPI.getUserOpHash(t),a=async()=>await new Promise((n,r)=>{new j(n,r,this.entryPoint,t.sender,s,t.nonce).start()});return{hash:s,confirmations:0,from:t.sender,nonce:0,gasLimit:o.from(t.callGasLimit),value:o.from(0),data:G(t.callData),chainId:this.chainId,wait:async n=>{const r=await a();return t.initCode.length!==0&&await this.smartAccountAPI.checkAccountPhantom(),r}}}async detectNetwork(){return this.originalProvider.detectNetwork()}}function ne(i,e,t,s){const a=O.EntryPoint__factory.connect(i.entryPointAddress,t),n=new ee(i.bundlerUrl,i.entryPointAddress,s,i.clientId,i.secretKey);return new re(s,i,i.localSigner,t,n,a,e)}const ie="0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c";class le{constructor(e){U(this,"isPhantom",!0),this.provider=e.provider,this.entryPointAddress=e.entryPointAddress,this.accountAddress=e.accountAddress,this.paymasterAPI=e.paymasterAPI,this.gasless=e.gasless,this.entryPointView=O.EntryPoint__factory.connect(e.entryPointAddress,e.provider).connect(A)}async checkAccountPhantom(){return this.isPhantom?((await this.provider.getCode(this.getAccountAddress())).length>2&&(this.isPhantom=!1),this.isPhantom):this.isPhantom}async getInitCode(){return await this.checkAccountPhantom()?await this.getAccountInitCode():"0x"}async getVerificationGasLimit(){return 1e5}async getUserOpHash(e){const t=await this.provider.getNetwork().then(s=>s.chainId);return Z(e,this.entryPointAddress,t)}async getAccountAddress(){return this.senderAddress||(this.accountAddress?this.senderAddress=this.accountAddress:this.senderAddress=await this.getCounterFactualAddress()),this.senderAddress}async estimateCreationGas(e){if(!e||e==="0x")return 0;const t=e.substring(0,42),s="0x"+e.substring(42);return await this.provider.estimateGas({to:t,data:s})}async createUnsignedUserOp(e,t,s){const a=await this.getInitCode(),n=oe(t.value)??o.from(0),r=s!=null&&s.batchData?t.data:await this.prepareExecute(t.target,n,t.data).then(m=>m.encode());let{maxFeePerGas:l,maxPriorityFeePerGas:d}=t;if(!l||!d){const m=await W(this.provider);if(d||(d=m.maxPriorityFeePerGas??void 0),!l){l=m.maxFeePerGas??void 0;const u=(await this.provider.getNetwork()).chainId;(u===$.chainId||u===V.chainId||u===M.chainId)&&(d=l)}}if(!l||!d)throw new Error("maxFeePerGas or maxPriorityFeePerGas could not be calculated, please pass them explicitely");const[w,v]=await Promise.all([this.getAccountAddress(),t.nonce?Promise.resolve(t.nonce):this.getNonce()]),c={sender:w,nonce:v,initCode:a,callData:r,maxFeePerGas:l,maxPriorityFeePerGas:d,callGasLimit:o.from(1e6),verificationGasLimit:o.from(1e6),preVerificationGas:o.from(1e6),paymasterAndData:"0x",signature:ie};if((s==null?void 0:s.gasless)!==void 0?s.gasless:this.gasless){const m=await this.paymasterAPI.getPaymasterAndData(c),h=m.paymasterAndData;if(h&&h!=="0x"&&(c.paymasterAndData=h),m.callGasLimit&&m.verificationGasLimit&&m.preVerificationGas)c.callGasLimit=o.from(m.callGasLimit),c.verificationGasLimit=o.from(m.verificationGasLimit),c.preVerificationGas=o.from(m.preVerificationGas);else{let u;try{u=await e.estimateUserOpGas(c)}catch(p){throw this.unwrapBundlerError(p)}if(c.callGasLimit=o.from(u.callGasLimit),c.verificationGasLimit=o.from(u.verificationGasLimit),c.preVerificationGas=o.from(u.preVerificationGas),h&&h!=="0x"){const p=await this.paymasterAPI.getPaymasterAndData(c);p.paymasterAndData&&p.paymasterAndData!=="0x"&&(c.paymasterAndData=p.paymasterAndData)}}}else{let m;try{m=await e.estimateUserOpGas(c)}catch(h){throw this.unwrapBundlerError(h)}c.callGasLimit=o.from(m.callGasLimit),c.verificationGasLimit=o.from(m.verificationGasLimit),c.preVerificationGas=o.from(m.preVerificationGas)}return{...c,signature:""}}async signUserOp(e){const t=await this.getUserOpHash(e),s=await this.signUserOpHash(t);return{...e,signature:s}}async getUserOpReceipt(e){let t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:3e4,s=arguments.length>2&&arguments[2]!==void 0?arguments[2]:2e3;const a=Date.now()+t;for(;Date.now()<a;){const n=await this.entryPointView.queryFilter(this.entryPointView.filters.UserOperationEvent(e));if(n[0])return n[0].transactionHash;await new Promise(r=>setTimeout(r,s))}return null}unwrapBundlerError(e){var s;const t=((s=e==null?void 0:e.error)==null?void 0:s.message)||e.error||e.message||e;return new Error(t)}}function oe(i){return!i||i===""?null:o.from(i.toString())}class ce extends le{constructor(e,t){super({...e,provider:t}),this.params=e,this.sdk=P.fromPrivateKey(F,e.chain,{clientId:e.clientId,secretKey:e.secretKey,supportedChains:typeof e.chain=="object"?[e.chain]:void 0})}async getChainId(){return await this.provider.getNetwork().then(e=>e.chainId)}async getAccountContract(){var e;return this.accountContract||((e=this.params.accountInfo)!=null&&e.abi?this.accountContract=await this.sdk.getContract(await this.getAccountAddress(),this.params.accountInfo.abi):this.accountContract=await this.sdk.getContract(await this.getAccountAddress(),R)),this.accountContract}async getAccountInitCode(){const e=await this.getFactoryContract();console.log("Deploying smart wallet via factory");const t=await this.params.localSigner.getAddress(),s=await this.params.factoryInfo.createAccount(e,t);try{console.log("Cost to deploy smart wallet: ",(await s.estimateGasCost()).ether,"ETH")}catch(a){console.error("Cost to deploy smart wallet: unknown",a)}return B([e.getAddress(),s.encode()])}async getFactoryContract(){var e;return this.factoryContract?this.factoryContract:((e=this.params.factoryInfo)!=null&&e.abi?this.factoryContract=await this.sdk.getContract(this.params.factoryAddress,this.params.factoryInfo.abi):this.factoryContract=await this.sdk.getContract(this.params.factoryAddress),this.factoryContract)}async getCounterFactualAddress(){if(this.params.accountAddress)return this.params.accountAddress;const e=await this.getFactoryContract(),t=await this.params.localSigner.getAddress();return this.params.factoryInfo.getAccountAddress(e,t)}async getNonce(){if(await this.checkAccountPhantom())return o.from(0);const e=await this.getAccountContract();return this.params.accountInfo.getNonce(e)}async prepareExecute(e,t,s){const a=await this.getAccountContract();return this.params.accountInfo.execute(a,e,t,s)}async prepareExecuteBatch(e,t,s){return(await this.getAccountContract()).prepare("executeBatch",[e,t,s])}async signUserOpHash(e){return await this.params.localSigner.signMessage(H(e))}async isAcountDeployed(){return!await this.checkAccountPhantom()}}class me extends D{constructor(e){super(),this.config=e}async initialize(e){const t=this.config,s=S(t.chain,{clientId:t.clientId,secretKey:t.secretKey});this.chainId=(await s.getNetwork()).chainId;const a=this.config.bundlerUrl||`https://${this.chainId}.bundler.thirdweb.com`,n=this.config.paymasterUrl||`https://${this.chainId}.bundler.thirdweb.com/v2`,r=t.entryPointAddress||L,l=t.deployOnSign??!0,d=await e.personalWallet.getSigner(),w={chain:t.chain,localSigner:d,entryPointAddress:r,bundlerUrl:a,paymasterAPI:this.config.paymasterAPI?this.config.paymasterAPI:se(n,r,this.config.clientId,this.config.secretKey),gasless:t.gasless,deployOnSign:l,factoryAddress:t.factoryAddress,accountAddress:e.accountAddress,factoryInfo:t.factoryInfo||this.defaultFactoryInfo(),accountInfo:t.accountInfo||this.defaultAccountInfo(),clientId:t.clientId,secretKey:t.secretKey};this.personalWallet=e.personalWallet;const v=new ce(w,s);this.aaProvider=ne(w,v,s,this.chainId),this.accountApi=v}async connect(e){return await this.initialize(e),await this.getAddress()}getProvider(){if(!this.aaProvider)throw new Error("Personal wallet not connected");return Promise.resolve(this.aaProvider)}async getSigner(){if(!this.aaProvider)throw new Error("Personal wallet not connected");return Promise.resolve(this.aaProvider.getSigner())}async getAddress(){return(await this.getSigner()).getAddress()}async isConnected(){try{return!!await this.getAddress()}catch{return!1}}async disconnect(){this.personalWallet=void 0,this.aaProvider=void 0}async switchChain(e){if((await(await this.getProvider()).getNetwork()).chainId!==e)throw new Error("Not supported.")}setupListeners(){return Promise.resolve()}updateChains(e){}async hasPermissionToExecute(e){var r;const t=await this.getAccountContract(),a=await(await this.getSigner()).getAddress(),n=(r=(await t.account.getAllSigners()).filter(l=>k(l.signer)===k(a))[0])==null?void 0:r.permissions;return n?n.approvedCallTargets.includes(e.getTarget()):!1}async send(e,t){return(await this.getSigner()).sendTransaction({to:e.getTarget(),data:e.encode(),value:await e.getValue()},t)}async execute(e,t){return{receipt:await(await this.send(e,t)).wait()}}async sendBatch(e,t){if(!this.accountApi)throw new Error("Personal wallet not connected");const s=await this.getSigner(),{tx:a,batchData:n}=await this.prepareBatchTx(e);return await s.sendTransaction({to:await s.getAddress(),data:a.encode(),value:0},{...t,batchData:n})}async executeBatch(e,t){return{receipt:await(await this.sendBatch(e,t)).wait()}}async sendRaw(e,t){if(!this.accountApi)throw new Error("Personal wallet not connected");return(await this.getSigner()).sendTransaction(e,t)}async executeRaw(e,t){return{receipt:await(await this.sendRaw(e,t)).wait()}}async sendBatchRaw(e,t){if(!this.accountApi)throw new Error("Personal wallet not connected");const s=await this.getSigner(),a=await this.prepareBatchRaw(e);return s.sendTransaction({to:await s.getAddress(),data:a.tx.encode(),value:0},{...t,batchData:a.batchData})}async executeBatchRaw(e,t){return{receipt:await(await this.sendBatchRaw(e,t)).wait()}}async estimate(e,t){if(!this.accountApi)throw new Error("Personal wallet not connected");return this.estimateTx({target:e.getTarget(),data:e.encode(),value:await e.getValue(),gasLimit:await e.getOverrides().gasLimit,maxFeePerGas:await e.getOverrides().maxFeePerGas,maxPriorityFeePerGas:await e.getOverrides().maxPriorityFeePerGas,nonce:await e.getOverrides().nonce},t)}async estimateRaw(e,t){var a;if(!this.accountApi)throw new Error("Personal wallet not connected");const s=await b(e);return this.estimateTx({target:s.to||A,data:((a=s.data)==null?void 0:a.toString())||"",value:s.value||o.from(0),gasLimit:s.gasLimit,maxFeePerGas:s.maxFeePerGas,maxPriorityFeePerGas:s.maxPriorityFeePerGas,nonce:s.nonce},t)}async estimateBatch(e,t){if(!this.accountApi)throw new Error("Personal wallet not connected");const{tx:s,batchData:a}=await this.prepareBatchTx(e);return this.estimateTx({target:s.getTarget(),data:s.encode(),value:await s.getValue(),gasLimit:await s.getOverrides().gasLimit,maxFeePerGas:await s.getOverrides().maxFeePerGas,maxPriorityFeePerGas:await s.getOverrides().maxPriorityFeePerGas,nonce:await s.getOverrides().nonce},{...t,batchData:a})}async estimateBatchRaw(e,t){if(!this.accountApi)throw new Error("Personal wallet not connected");const{tx:s,batchData:a}=await this.prepareBatchRaw(e);return this.estimateTx({target:s.getTarget(),data:s.encode(),value:await s.getValue(),gasLimit:await s.getOverrides().gasLimit,maxFeePerGas:await s.getOverrides().maxFeePerGas,maxPriorityFeePerGas:await s.getOverrides().maxPriorityFeePerGas,nonce:await s.getOverrides().nonce},{...t,batchData:a})}async deploy(e){if(!this.accountApi)throw new Error("Personal wallet not connected");const t=await this.getSigner();return{receipt:await(await t.sendTransaction({to:await t.getAddress(),data:"0x"},{...e,batchData:{targets:[],data:[],values:[]}})).wait()}}async isDeployed(){if(!this.accountApi)throw new Error("Personal wallet not connected");return await this.accountApi.isAcountDeployed()}async deployIfNeeded(e){await this.isDeployed()||await this.deploy(e)}async grantPermissions(e,t){return await this.deployIfNeeded(),(await this.getAccountContract()).account.grantPermissions(e,t)}async revokePermissions(e){return await this.deployIfNeeded(),(await this.getAccountContract()).account.revokeAccess(e)}async addAdmin(e){return await this.deployIfNeeded(),(await this.getAccountContract()).account.grantAdminPermissions(e)}async removeAdmin(e){return await this.deployIfNeeded(),(await this.getAccountContract()).account.revokeAdminPermissions(e)}async getAllActiveSigners(){var t;if(await this.isDeployed())return(await this.getAccountContract()).account.getAllAdminsAndSigners();{const s=await((t=this.personalWallet)==null?void 0:t.getSigner());if(!s)throw new Error("Personal wallet not connected");return[{isAdmin:!0,signer:await s.getAddress(),permissions:{startDate:new Date(0),expirationDate:new Date(0),nativeTokenLimitPerTransaction:o.from(0),approvedCallTargets:[]}}]}}async getAccountContract(){var s;if(!await this.isDeployed())throw new Error("Account contract is not deployed yet. You can deploy it manually using SmartWallet.deploy(), or by executing a transaction from this wallet.");const t=P.fromSigner(await this.getSigner(),this.config.chain,{clientId:this.config.clientId,secretKey:this.config.secretKey});return(s=this.config.accountInfo)!=null&&s.abi?t.getContract(await this.getAddress(),this.config.accountInfo.abi):t.getContract(await this.getAddress())}async getFactoryContract(){var t;const e=P.fromSigner(await this.getSigner(),this.config.chain,{clientId:this.config.clientId,secretKey:this.config.secretKey});return(t=this.config.factoryInfo)!=null&&t.abi?e.getContract(this.config.factoryAddress,this.config.factoryInfo.abi):e.getContract(this.config.factoryAddress)}defaultFactoryInfo(){return{createAccount:async(e,t)=>e.prepare("createAccount",[t,C("")]),getAccountAddress:async(e,t)=>await e.call("getAddress",[t,C("")])}}defaultAccountInfo(){return{execute:async(e,t,s,a)=>e.prepare("execute",[t,s,a]),getNonce:async e=>e.call("getNonce",[])}}async estimateTx(e,t){if(!this.accountApi||!this.aaProvider)throw new Error("Personal wallet not connected");let s=o.from(0);const[a,n]=await Promise.all([this.getProvider(),this.isDeployed()]);n||(s=await this.estimateDeploymentGasLimit());const[r,l]=await Promise.all([this.accountApi.createUnsignedUserOp(this.aaProvider.httpRpcClient,e,t),N(a)]),d=await b(r),w=o.from(d.callGasLimit),v=w.mul(l),c=s.mul(l),f=c.add(v);return{ether:_(f),wei:f,details:{deployGasLimit:s,transactionGasLimit:w,gasPrice:l,transactionCost:v,deployCost:c,totalCost:f}}}async estimateDeploymentGasLimit(){if(!this.accountApi)throw new Error("Personal wallet not connected");const e=await this.accountApi.getInitCode(),[t,s]=await Promise.all([this.accountApi.estimateCreationGas(e),this.accountApi.getVerificationGasLimit()]);return o.from(s).add(t)}async prepareBatchRaw(e){if(!this.accountApi)throw new Error("Personal wallet not connected");const t=await Promise.all(e.map(r=>b(r))),s=t.map(r=>r.to||A),a=t.map(r=>r.data||"0x"),n=t.map(r=>r.value||o.from(0));return{tx:await this.accountApi.prepareExecuteBatch(s,n,a),batchData:{targets:s,data:a,values:n}}}async prepareBatchTx(e){if(!this.accountApi)throw new Error("Personal wallet not connected");const t=e.map(n=>n.getTarget()),s=e.map(n=>n.encode()),a=await Promise.all(e.map(n=>n.getValue()));return{tx:await this.accountApi.prepareExecuteBatch(t,a,s),batchData:{targets:t,data:s,values:a}}}}export{me as SmartWalletConnector};
